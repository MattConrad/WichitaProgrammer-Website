{"version":3,"sources":["game.js","speed.js","computeGameBoardDimensions.js","components/Board.js","patternData.js","components/PatternSelect.js","App.js","hooks/useRefSize.js","serviceWorker.js","index.js","patternData.txt"],"names":["initGame","pattern","rows","columns","wraparound","generation","board","initBoard","every","row","length","Error","patRows","patCols","patRowStartIndex","Math","floor","patColStartIndex","Array","fill","map","i","j","nextBoard","rowIndex","isCellAlive","colIndex","selfRowIndex","selfColIndex","aliveNeighborCount","count","rowOffset","colOffset","ri","ci","getAliveNeighborCount","nextCellAlive","maxSpeedRange","maxDelay","getDelayFromSpeedRange","speedRangeValue","initialSpeedRangeValue","initialDelay","computeGameBoardDimensions","boardRefX","boardPixelWidth","boardPixelHeight","window","getComputedStyle","current","getPropertyValue","Board","boardRef","ref","id","reduce","acc","col","patternsPromise","a","fetch","data","then","response","text","dataString","blocks","split","patterns","forEach","block","lines","name","cells","slice","line","c","parsePatternsPromise","PatternSelect","setGameIsRunning","reloadGame","useState","setPatterns","useEffect","loadedPatterns","firstPatternName","Object","keys","changePattern","patternName","percentString","replace","fillFactorDecimal","parseFloat","isAlive","random","push","calculatePattern","onChange","event","target","value","p","key","safelyInitializeGame","error","alert","App","currentSpeedRange","setCurrentSpeedRange","width","height","boardPixelDimensions","setBoardPixelDimensions","game","setGame","delay","setDelay","isRunning","setIsRunning","setWraparound","useRef","advanceOneGeneration","nextGeneration","goToGeneration","generationNumber","targetGeneration","newBoard","forceToGeneration","max","elementRef","dimensions","setDimensions","getDimensions","offsetWidth","offsetHeight","handleResize","addEventListener","removeEventListener","useRefSize","currentBoardPixelWidth","currentBoardPixelHeight","timeoutId","setTimeout","clearTimeout","newBoardGameSize","gamePattern","href","rel","patternData","gameSize","type","checked","alterWraparound","onClick","htmlFor","min","e","newSpeedRangeValue","disabled","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message","module","exports"],"mappings":"oNAAaA,EAAW,SAACC,EAASC,EAAMC,EAASC,GAC7C,MAAO,CAAEH,UAASC,OAAMC,UAASC,aAC7BC,WAAY,EACZC,MAAOC,EAAUN,EAASC,EAAMC,KAQlCI,EAAY,SAACN,EAASC,EAAMC,GAE9B,IADeF,EAAQO,OAAM,SAAAC,GAAG,OAAIA,EAAIC,SAAWT,EAAQ,GAAGS,UACjD,MAAM,IAAIC,MAAO,sCAE9B,IAAMC,EAAUX,EAAQS,OAClBG,EAAUZ,EAAQ,GAAGS,OAC3B,GAAIE,EAAUV,GAAQW,EAAUV,EAAS,MAAM,IAAIQ,MAAM,2DAQzD,IANA,IAAMG,EAAmBC,KAAKC,OAAOd,EAAOU,GAAW,GACjDK,EAAmBF,KAAKC,OAAOb,EAAUU,GAAW,GAGpDP,EAAQY,MAAMhB,GAAMiB,MAAK,GAAOC,KAAI,kBAAM,IAAIF,MAAMf,GAASgB,MAAK,MAEhEE,EAAI,EAAGA,EAAIpB,EAAQS,OAAQW,IAC/B,IAAI,IAAIC,EAAI,EAAGA,EAAIrB,EAAQ,GAAGS,OAAQY,IAClChB,EAAMQ,EAAmBO,GAAGJ,EAAmBK,GAAKrB,EAAQoB,GAAGC,GAIvE,OAAOhB,GAoDEiB,EAAY,SAACjB,EAAOF,GAC7B,OAAOE,EAAMc,KAAI,SAACX,EAAKe,GACnB,OAAOf,EAAIW,KAAI,SAACK,EAAaC,GACzB,OAvBU,SAACpB,EAAOmB,EAAaE,EAAcC,EAAcxB,GACnE,IAAMyB,EA9BoB,SAACvB,EAAOqB,EAAcC,EAAcxB,GAG9D,IAFA,IAAI0B,EAAQ,EAEJC,GAAa,EAAGA,GAAa,EAAGA,IACpC,IAAI,IAAIC,GAAa,EAAGA,GAAa,EAAGA,IAEpC,GAAkB,IAAdD,GAAiC,IAAdC,EAAvB,CAEA,IAAIC,EAAKN,EAAeI,EACpBG,EAAKN,EAAeI,EAExB,GAAI5B,EACI6B,EAAK,IAAGA,GAAU3B,EAAMI,QACxBwB,EAAK,IAAGA,GAAU5B,EAAM,GAAGI,QAE3BuB,EAAK3B,EAAMI,OAAS,IAAGuB,GAAU3B,EAAMI,QACvCwB,EAAK5B,EAAM,GAAGI,OAAS,IAAGwB,GAAU5B,EAAM,GAAGI,YAC9C,CACH,GAAIuB,EAAK,GAAKA,EAAK3B,EAAMI,OAAS,EAAG,SACrC,GAAIwB,EAAK,GAAKA,EAAK5B,EAAM,GAAGI,OAAS,EAAG,SAGxCJ,EAAM2B,GAAIC,IAAKJ,IAI3B,OAAOA,EAIoBK,CAAsB7B,EAAOqB,EAAcC,EAAcxB,GAGpF,OAA+B,IAAvByB,GAA6BJ,GAAsC,IAAvBI,EAmBrCO,CAAc9B,EAAOmB,EAAaD,EAAUE,EAAUtB,UCnFnEiC,EAAa,SAAIC,KAAwB,GACzCC,EAAyB,SAACC,GAAD,OAJd,IAI4C,SAAIA,EAAmB,KAC9EC,EAAyC,GAAhBJ,EACzBK,EAAeH,EAAuBE,GCkB7BE,EAhBoB,SAACC,EAAWC,EAAiBC,GAC5D,IAEI5C,EAAMC,EAUV,MARiB,SAJA4C,OAAOC,iBAAiBJ,EAAUK,SAASC,iBAAiB,cAK3EhD,EAAOa,KAAKC,MAAM8B,EAAmB,IACrC3C,EAAUY,KAAKC,MAdY,IAcN6B,EAA6C,KAElE3C,EAAOa,KAAKC,MAAM8B,EAAmB,IACrC3C,EAAUY,KAAKC,MAjBY,IAiBN6B,EAA6C,OAG7D,CAAE3C,OAAMC,YCPJgD,EAZD,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,SAAU9C,EAAW,EAAXA,MACtB,OAAO,yBAAK+C,IAAKD,EAAUE,GAAG,SACzBhD,EAAMc,KAAI,SAACX,EAAKe,GACb,OAAOf,EAAI8C,QAAO,SAACC,EAAKC,GAEpB,OAAOD,GAAOC,EAAM,SAAW,OAChC,IAAM,U,uCCgBRC,EApBa,uCAAG,gCAAAC,EAAA,sEACAC,MAAMC,KAAMC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UADtC,cACnBC,EADmB,OAGnBC,EAASD,EAAWE,MAAM,YAE1BC,EAAW,GAEjBF,EAAOG,SAAQ,SAAAC,GACX,IAAMC,EAAQD,EAAMH,MAAM,QACpBK,EAAOD,EAAM,GACbE,EAAQF,EAAMG,MAAM,GAAGtD,KAAI,SAAAuD,GAAI,OACjCA,EAAKR,MAAM,IAAI/C,KAAI,SAAAwD,GAAC,MAAU,MAANA,QAG5BR,EAASI,GAAQC,KAdI,kBAiBlBL,GAjBkB,2CAAH,oDAoBKS,GCiDhBC,EAtEO,SAAC,GAAoC,IAAnCC,EAAkC,EAAlCA,iBAAkBC,EAAgB,EAAhBA,WAAgB,EACtBC,qBADsB,mBAC/Cb,EAD+C,KACrCc,EADqC,KAItDC,qBAAU,WACNzB,EAAgBI,MAAK,SAAAsB,GACjBF,EAAYE,QAEjB,IAGHD,qBAAU,WACN,GAAKf,EAAL,CAGA,IAAMiB,EAAmBC,OAAOC,KAAKnB,GAAU,GAC/CoB,EAAcH,MAOf,CAACjB,IAEJ,IAoBMoB,EAAgB,SAACC,GACnBV,GAAiB,GAEM,MAAnBU,EAAY,GACZT,EAxBiB,SAACS,GAOtB,IALA,IAAMC,EAAgBD,EAAYE,QAAQ,MAAO,IAC3CC,EAAoBC,WAAWH,GAAiB,IAGhDzF,EAAU,GACRoB,EAAI,EAAGA,EAAI,GAAIA,IAAK,CAExB,IADA,IAAMZ,EAAM,GACJa,EAAI,EAAGA,EAAI,GAAIA,IAAK,CACxB,IAAMwE,EAAU/E,KAAKgF,SAAWH,EAEhCnF,EAAIuF,KAAKF,GAEb7F,EAAQ+F,KAAKvF,GAGjB,OAAOR,EAOQgG,CAAiBR,IAE5BT,EAAWZ,EAASqB,KAgB5B,OAXQrB,EACQ,yCACK,4BAAQ8B,SAAU,SAACC,GAAD,OAAWX,EAAcW,EAAMC,OAAOC,SAC5Df,OAAOC,KAAKnB,GAAUhD,KAAI,SAAAkF,GAAC,OAAI,4BAAQC,IAAKD,GAAIA,QAIlD,+C,OCvDbE,G,MAAuB,SAACvG,EAASC,EAAMC,EAASC,GACpD,IACE,OAAOJ,EAASC,EAASC,EAAMC,EAASC,GACxC,MAAOqG,GAGP,OAFAC,MAAMD,GACNC,MAAM,0HACC1G,EAAS,CAAC,IAAKE,EAAMC,EAASC,MAsH1BuG,MAlHf,WAAgB,IAAD,EACqC1B,mBAASxC,GAD9C,mBACNmE,EADM,KACaC,EADb,OAE2C5B,mBAAS,CAAE6B,MAAO,EAAGC,OAAQ,IAFxE,mBAENC,EAFM,KAEgBC,EAFhB,OAGWhC,qBAHX,mBAGNiC,EAHM,KAGAC,EAHA,OAIalC,mBAASvC,GAJtB,mBAIN0E,EAJM,KAICC,EAJD,OAKqBpC,oBAAS,GAL9B,mBAKNqC,EALM,KAKKC,EALL,OAMuBtC,oBAAS,GANhC,mBAMN7E,EANM,KAMMoH,EANN,KAQPpE,EAAWqE,mBAEXC,EAAuB,WAC3BP,ENsC0B,SAACD,GAC3B,OAAO,eAAKA,EAAZ,CAAkB7G,WAAY6G,EAAK7G,WAAa,EAAGC,MAAOiB,EAAU2F,EAAK5G,MAAO4G,EAAK9G,cMvC7EuH,CAAeT,KAanBU,EAAiB,SAACC,GACtBN,GAAa,GACbJ,EN2B6B,SAACD,EAAMY,GAEpC,IADA,IAAIC,EAAWxH,EAAU2G,EAAKjH,QAASiH,EAAKhH,KAAMgH,EAAK/G,SAC/CkB,EAAI,EAAGA,EAAIyG,EAAkBzG,IACjC0G,EAAWxG,EAAUwG,EAAUb,EAAK9G,YAGxC,OAAO,eAAK8G,EAAZ,CAAkB7G,WAAYyH,EAAkBxH,MAAOyH,IMjC/CC,CAAkBd,EAAMnG,KAAKkH,IAAIJ,EAAkB,MA1BhD,EClBW,SAAAK,GAAe,IAAD,EACAjD,mBAAS,CAAE6B,MAAO,EAAGC,OAAQ,IAD7B,mBAC7BoB,EAD6B,KACjBC,EADiB,KAwBpC,OArBAjD,qBAAU,WACN,IAAMkD,EAAgB,iBAAO,CACzBvB,MAAOoB,EAAWjF,QAAQqF,YAC1BvB,OAAQmB,EAAWjF,QAAQsF,eAGzBC,EAAe,WACjBJ,EAAcC,MASlB,OANIH,EAAWjF,SACXmF,EAAcC,KAGlBtF,OAAO0F,iBAAiB,SAAUD,GAE3B,WACHzF,OAAO2F,oBAAoB,SAAUF,MAE1C,CAACN,IAEGC,ED4BkEQ,CAAWvF,GAAvEwF,EAlCF,EAkCL9B,MAAuC+B,EAlClC,EAkC0B9B,OA2BvC,OAxBA5B,qBAAU,WACR,GAAImC,EAAW,CACb,IAAMwB,EAAYC,WAAWrB,EAAsBN,GACnD,OAAO,WACL4B,aAAaF,QASnB3D,qBAAU,WACR,GAAI6B,EAAqBF,QAAU8B,GAA0B5B,EAAqBD,SAAW8B,EAAyB,CACpH5B,EAAwB,CAAEH,MAAO8B,EAAwB7B,OAAQ8B,IACjE,IAAMI,EAAmBtG,EAA2BS,EAAUwF,EAAwBC,GAEhFK,EAAchC,EAAOA,EAAKjH,QAAU,CAAC,IAE3CkH,EAAQX,EAAqB0C,EAAaD,EAAiB/I,KAAM+I,EAAiB9I,QAASC,OAE5F,CAAC4G,EAAqBF,MAAOE,EAAqBD,OAAQ6B,EAAwBC,EAAyB3B,EAAM9G,IAGlH,yBAAKkD,GAAG,QACN,yBAAKA,GAAG,WACN,yBAAKA,GAAG,mBACN,uBAAG6F,KAAK,wDAAwDC,IAAI,sBAAsBhD,OAAO,UAAjG,yBACA,6BACA,6BACA,kBAAC,EAAD,CAAerB,iBAAkBwC,EAAcvC,WAvCpC,SAACqE,GAClB,IAAMC,EAAW3G,EAA2BS,EAAU4D,EAAqBF,MAAOE,EAAqBD,QACvGI,EAAQX,EAAqB6C,EAAaC,EAASpJ,KAAMoJ,EAASnJ,QAASC,OAsCrE,6BACA,6BACE,2BAAOmJ,KAAK,WAAWrD,SAzDR,SAACC,GACxBqB,EAAcrB,EAAMC,OAAOoD,SAC3BrC,EN9B2B,SAACD,EAAM9G,GAClC,OAAO,eAAK8G,EAAZ,CAAkB9G,eM6BVqJ,CAAgBvC,EAAMf,EAAMC,OAAOoD,WAuDgBA,QAASpJ,IAD9D,qBAGA,6BACA,6BACE,2BAAOmJ,KAAK,SAASG,QAAS,kBAAMnC,GAAcD,IAAajB,MAAQiB,EAAY,OAAS,WAE9F,6BACA,6BACE,2BAAOqC,QAAQ,gBAAf,cACA,2BAAOrG,GAAG,eAAeiG,KAAK,QAAQK,IAAI,IAAI3B,IAAK5F,EAAegE,MAAOO,EAAmBV,SAAU,SAAA2D,GAAC,OA7D5FC,EA6D4GD,EAAEzD,OAAOC,MA5DxIQ,EAAqBiD,QACrBzC,EAAS9E,EAAuBuH,IAFd,IAACA,MA+Db,6BACA,8BAEF,yBAAKxG,GAAG,mBACN,4CACe4D,EAAOA,EAAK7G,WAAa,GAExC,6BACA,6BACE,2BAAOkJ,KAAK,SAASG,QAAShC,EAAsBqC,SAAUzC,EAAWjB,MAAM,0BAEjF,6BACA,6BACE,2BAAOkD,KAAK,SAASG,QAAS,kBAAM9B,EAAeV,EAAK7G,WAAa,KAAMgG,MAAM,2BAEnF,6BACE,2BAAOkD,KAAK,SAASG,QAAS,kBAAM9B,EAAeV,EAAK7G,WAAa,MAAOgG,MAAM,4BAEpF,6BACE,2BAAOkD,KAAK,SAASG,QAAS,kBAAM9B,EAAe,IAAKvB,MAAM,2BAEhE,6BACA,+BAGJ,yBAAK/C,GAAG,mBACN,kBAAC,EAAD,CAAOF,SAAUA,EAAU9C,MAAO4G,EAAOA,EAAK5G,MAAQ,QErH1C0J,QACW,cAA7BjH,OAAOkH,SAASC,UAEe,UAA7BnH,OAAOkH,SAASC,UAEhBnH,OAAOkH,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7G,MAAK,SAAA8G,GACJA,EAAaC,gBAEdC,OAAM,SAAArE,GACLsE,QAAQtE,MAAMA,EAAMuE,a,kBEzI5BC,EAAOC,QAAU,IAA0B,yC","file":"static/js/main.dade0c2b.chunk.js","sourcesContent":["export const initGame = (pattern, rows, columns, wraparound) => {\r\n    return { pattern, rows, columns, wraparound,\r\n        generation: 0,\r\n        board: initBoard(pattern, rows, columns)\r\n    }\r\n}\r\n\r\nexport const alterWraparound = (game, wraparound) => {\r\n    return { ...game, wraparound };\r\n}\r\n\r\nconst initBoard = (pattern, rows, columns) => {\r\n    const isRect = pattern.every(row => row.length === pattern[0].length);\r\n    if (!isRect) throw new Error ('Pattern array must be rectangular.');\r\n\r\n    const patRows = pattern.length;\r\n    const patCols = pattern[0].length;\r\n    if (patRows > rows || patCols > columns) throw new Error('Pattern must be smaller in width and height than board.');\r\n\r\n    const patRowStartIndex = Math.floor((rows - patRows) / 2);\r\n    const patColStartIndex = Math.floor((columns - patCols) / 2);\r\n\r\n    // we use .map() here to avoid multiple refs to the same array https://stackoverflow.com/questions/18163234/declare-an-empty-two-dimensional-array-in-javascript\r\n    const board = Array(rows).fill(false).map(() => new Array(columns).fill(false));\r\n\r\n    for(let i = 0; i < pattern.length; i++) {\r\n        for(let j = 0; j < pattern[0].length; j++) {\r\n            board[patRowStartIndex + i][patColStartIndex + j] = pattern[i][j];\r\n        }\r\n    }\r\n\r\n    return board;\r\n}\r\n\r\nconst getAliveNeighborCount = (board, selfRowIndex, selfColIndex, wraparound) => {\r\n    let count = 0;\r\n\r\n    for(let rowOffset = -1; rowOffset <= 1; rowOffset++) {\r\n        for(let colOffset = -1; colOffset <= 1; colOffset++) {\r\n            \r\n            if (rowOffset === 0 && colOffset === 0) continue;\r\n            \r\n            let ri = selfRowIndex + rowOffset;\r\n            let ci = selfColIndex + colOffset;\r\n\r\n            if (wraparound) {\r\n                if (ri < 0) ri = ri + board.length;\r\n                if (ci < 0) ci = ci + board[0].length;\r\n\r\n                if (ri > board.length - 1) ri = ri - board.length;\r\n                if (ci > board[0].length - 1) ci = ci - board[0].length;\r\n            } else {\r\n                if (ri < 0 || ri > board.length - 1) continue;\r\n                if (ci < 0 || ci > board[0].length - 1) continue;\r\n            }\r\n\r\n            if (board[ri][ci]) count++;\r\n        }\r\n    }\r\n\r\n    return count;\r\n};\r\n\r\nconst nextCellAlive = (board, isCellAlive, selfRowIndex, selfColIndex, wraparound) => {\r\n    const aliveNeighborCount = getAliveNeighborCount(board, selfRowIndex, selfColIndex, wraparound);\r\n\r\n    // see https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life\r\n    return (aliveNeighborCount === 3 || (isCellAlive && aliveNeighborCount === 2));\r\n};\r\n\r\nexport const nextGeneration = (game) => {\r\n    return { ...game, generation: game.generation + 1, board: nextBoard(game.board, game.wraparound) };\r\n}\r\n\r\nexport const forceToGeneration = (game, targetGeneration) => {\r\n    let newBoard = initBoard(game.pattern, game.rows, game.columns);    \r\n    for(let i = 0; i < targetGeneration; i++) {\r\n        newBoard = nextBoard(newBoard, game.wraparound);\r\n    }\r\n\r\n    return { ...game, generation: targetGeneration, board: newBoard };\r\n};\r\n\r\nexport const nextBoard = (board, wraparound) => {\r\n    return board.map((row, rowIndex) => {\r\n        return row.map((isCellAlive, colIndex) => {\r\n            return nextCellAlive(board, isCellAlive, rowIndex, colIndex, wraparound);\r\n        });\r\n    });\r\n};\r\n\r\n","const maxDelay = 2000;\r\nconst minDelay = 10;\r\n// taking the sqrt of the speed range value makes speed transitions feel smoother at the fast end, so the range is actually the delay ** 2.\r\nconst maxSpeedRange = (maxDelay - minDelay) ** 2;\r\nconst getDelayFromSpeedRange = (speedRangeValue) => (maxDelay - (speedRangeValue ** 0.5));\r\nconst initialSpeedRangeValue = maxSpeedRange * 0.8;\r\nconst initialDelay = getDelayFromSpeedRange(initialSpeedRangeValue);\r\n\r\nexport { maxSpeedRange, initialDelay, initialSpeedRangeValue, getDelayFromSpeedRange };\r\n","// usually the precisely calculated width is correct, but sometimes we get line wrap of one character. better to have a narrower effective width than get this wrap.\r\nconst BOARD_WIDTH_FUDGE_FACTOR = 0.98;\r\n\r\n// in a more perfect world, we'd actually measure the width + height of a single \"board\" character rather than hardcoding.\r\n// in this world, the game board is either font-size: 18px or font-size: 10px. we switch between these with media queries.\r\n// we don'really want to duplicate the media query logic here. instead, we inspect to see which font-size we're using, \r\n// and then pick between two hardcoded options to convert pixels to cell dimensions. yes, an admittedly imperfect world.\r\n\r\nconst computeGameBoardDimensions = (boardRefX, boardPixelWidth, boardPixelHeight) => {\r\n    const fontSize = window.getComputedStyle(boardRefX.current).getPropertyValue('font-size');\r\n\r\n    let rows, columns;\r\n\r\n    if (fontSize === '10px') {\r\n      rows = Math.floor(boardPixelHeight / 11);\r\n      columns = Math.floor(boardPixelWidth * BOARD_WIDTH_FUDGE_FACTOR / 6);\r\n    } else {\r\n      rows = Math.floor(boardPixelHeight / 20);\r\n      columns = Math.floor(boardPixelWidth * BOARD_WIDTH_FUDGE_FACTOR / 10.8);\r\n    }\r\n\r\n    return { rows, columns };\r\n}\r\n\r\nexport default computeGameBoardDimensions;\r\n","import React from 'react';\r\n\r\nconst Board = ({boardRef, board}) => {\r\n    return <div ref={boardRef} id=\"board\">\r\n        {board.map((row, rowIndex) => {\r\n            return row.reduce((acc, col) => {\r\n                //return acc + (col ? 'O' : '-');\r\n                return acc + (col ? '\\u25CF' : ' ');\r\n            }, '') + '\\n';\r\n        })}\r\n    </div>;\r\n};\r\n\r\n\r\nexport default Board;\r\n","import data from './patternData.txt';\r\n// patterns.txt is pieces taken from http://www.radicaleye.com/lifepage/glossary.html\r\n\r\n// resulting promise returns an object with the pattern name as the key and a rectangular array of cells as the value.\r\nconst parsePatternsPromise = async () => {\r\n    const dataString = await fetch(data).then(response => response.text());\r\n    \r\n    const blocks = dataString.split('\\r\\n\\r\\n');\r\n\r\n    const patterns = {};\r\n\r\n    blocks.forEach(block => {\r\n        const lines = block.split('\\r\\n');\r\n        const name = lines[0];\r\n        const cells = lines.slice(1).map(line => \r\n            line.split('').map(c => c === '*')\r\n        );\r\n\r\n        patterns[name] = cells;\r\n    });\r\n\r\n    return patterns;\r\n};\r\n\r\nexport const patternsPromise = parsePatternsPromise();\r\n","import React, { useState, useEffect } from 'react';\r\nimport { patternsPromise } from '../patternData';\r\n\r\nconst PatternSelect = ({setGameIsRunning, reloadGame}) => {\r\n    const [patterns, setPatterns] = useState();\r\n\r\n    // load patterns from patternsPromise on first render only.\r\n    useEffect(() => {\r\n        patternsPromise.then(loadedPatterns => { \r\n            setPatterns(loadedPatterns);\r\n        });\r\n    }, []);\r\n\r\n    // patterns should only change once (when first initialized). when this happens, trigger the change event using the first pattern in the patterns object.\r\n    useEffect(() => {\r\n        if (!patterns) return;\r\n\r\n        // firstPatternName should also be the name of the first (default) value in the <select> widget. \r\n        const firstPatternName = Object.keys(patterns)[0];\r\n        changePattern(firstPatternName);\r\n\r\n        // react wants to warn us about the \"changePattern\" function as an undeclared dependency. \r\n        // but as long as we are properly check \"patterns\" we do not need to worry about \"changePattern\". \r\n        // i wish we could turn off the warning for only this one dependency, and check all others, but this doesn't appear to be possible. so, silencing all.\r\n        \r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [patterns]);\r\n\r\n    const calculatePattern = (patternName) => {\r\n        // for now, we can be clever and compute the fillfactor from the pattern name.\r\n        const percentString = patternName.replace(/\\D/g, '');\r\n        const fillFactorDecimal = parseFloat(percentString) / 100.0;\r\n\r\n        // for now, random patterns are always a 10x10 square.\r\n        const pattern = [];\r\n        for(let i = 0; i < 10; i++) {\r\n            const row = [];\r\n            for(let j = 0; j < 10; j++) {\r\n                const isAlive = Math.random() < fillFactorDecimal;\r\n    \r\n                row.push(isAlive);\r\n            }\r\n            pattern.push(row);\r\n        }\r\n    \r\n        return pattern;\r\n    };\r\n\r\n    const changePattern = (patternName) => {\r\n        setGameIsRunning(false);\r\n        \r\n        if (patternName[0] === '(') {\r\n            reloadGame(calculatePattern(patternName));\r\n        } else {\r\n            reloadGame(patterns[patternName]);\r\n        }\r\n    }\r\n\r\n    const conditionalRender = () => {\r\n        if (patterns) {\r\n            return (<div>\r\n                Pattern: <select onChange={(event) => changePattern(event.target.value)}>\r\n                    {Object.keys(patterns).map(p => <option key={p}>{p}</option>)}\r\n                </select>\r\n            </div>);\r\n        } else {\r\n            return <div>loading . . .</div>;\r\n        }\r\n    };\r\n    \r\n    return conditionalRender();\r\n};\r\n\r\nexport default PatternSelect;\r\n","import React, { useState, useEffect, useRef } from 'react';\nimport { initGame, nextGeneration, forceToGeneration, alterWraparound } from './game';\nimport { maxSpeedRange, initialDelay, initialSpeedRangeValue, getDelayFromSpeedRange } from './speed';\nimport computeGameBoardDimensions from './computeGameBoardDimensions';\nimport Board from './components/Board';\nimport PatternSelect from './components/PatternSelect';\nimport { useRefSize } from './hooks/useRefSize';\nimport './App.css';\n\n// initializing a game has a couple of known error scenarios, we'll catch and handle these\n// this function needs to be OUTSIDE the component, otherwise there's a cascade of dependency issues coming from useEffect().\nconst safelyInitializeGame = (pattern, rows, columns, wraparound) => {\n  try {\n    return initGame(pattern, rows, columns, wraparound);\n  } catch (error) {\n    alert(error);\n    alert('Attempting to restart with an empty board. You may need to choose a different pattern or increase your browser\\'s size.');\n    return initGame([[]], rows, columns, wraparound);\n  }\n}\n\nfunction App() {\n  const [currentSpeedRange, setCurrentSpeedRange] = useState(initialSpeedRangeValue);\n  const [boardPixelDimensions, setBoardPixelDimensions] = useState({ width: 0, height: 0 });\n  const [game, setGame] = useState();\n  const [delay, setDelay] = useState(initialDelay);\n  const [isRunning, setIsRunning] = useState(false);\n  const [wraparound, setWraparound] = useState(true);\n\n  const boardRef = useRef();\n\n  const advanceOneGeneration = () => {\n    setGame(nextGeneration(game));\n  };\n\n  const changeWraparound = (event) => {\n    setWraparound(event.target.checked);\n    setGame(alterWraparound(game, event.target.checked));\n  }\n\n  const changeSpeed = (newSpeedRangeValue) => {\n    setCurrentSpeedRange(newSpeedRangeValue);\n    setDelay(getDelayFromSpeedRange(newSpeedRangeValue));\n  }\n\n  const goToGeneration = (generationNumber) => {\n    setIsRunning(false);\n    setGame(forceToGeneration(game, Math.max(generationNumber, 0)));\n  }\n\n  const reloadGame = (patternData) => {\n    const gameSize = computeGameBoardDimensions(boardRef, boardPixelDimensions.width, boardPixelDimensions.height);\n    setGame(safelyInitializeGame(patternData, gameSize.rows, gameSize.columns, wraparound));\n  }\n\n  const { width: currentBoardPixelWidth, height: currentBoardPixelHeight } = useRefSize(boardRef);\n\n  // timer for game generation advancement: runs every update.\n  useEffect(() => {\n    if (isRunning) {\n      const timeoutId = setTimeout(advanceOneGeneration, delay);\n      return () => {\n        clearTimeout(timeoutId);\n      };\n    }\n  });\n\n  // reset screen for new dimensions: is supposed to run only when board pixel dimensions change (although React wants, and gets, a more extensive dependency list)\n  // this doesn't work perfectly in every browser. \n  // most prominently, there are quirks in firefox when resizing width to a smaller size (but only sometimes!).\n  // i don't want to spend a long time on edge-case browser quirks, so some things will remain quirky.\n  useEffect(() => {\n    if (boardPixelDimensions.width !== currentBoardPixelWidth || boardPixelDimensions.height !== currentBoardPixelHeight) {\n      setBoardPixelDimensions({ width: currentBoardPixelWidth, height: currentBoardPixelHeight});\n      const newBoardGameSize = computeGameBoardDimensions(boardRef, currentBoardPixelWidth, currentBoardPixelHeight);\n\n      const gamePattern = game ? game.pattern : [[]];\n\n      setGame(safelyInitializeGame(gamePattern, newBoardGameSize.rows, newBoardGameSize.columns, wraparound));\n    }\n  }, [boardPixelDimensions.width, boardPixelDimensions.height, currentBoardPixelWidth, currentBoardPixelHeight, game, wraparound]);\n\n  return (\n    <div id=\"main\">\n      <div id=\"sidebar\">\n        <div id=\"sidebar-group-1\">\n          <a href=\"https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life\" rel=\"noopener noreferrer\" target=\"_blank\">Conway's Game Of Life</a>\n          <br />\n          <br />\n          <PatternSelect setGameIsRunning={setIsRunning} reloadGame={reloadGame} />\n          <br />\n          <div>\n            <input type=\"checkbox\" onChange={changeWraparound} checked={wraparound} /> Wraparound Edges\n          </div>\n          <br />\n          <div>\n            <input type=\"button\" onClick={() => setIsRunning(!isRunning) } value={(isRunning ? \"Stop\" : \"Start\")} />\n          </div>\n          <br />\n          <div>\n            <label htmlFor=\"speed-slider\">Speed &nbsp;</label>\n            <input id=\"speed-slider\" type=\"range\" min=\"0\" max={maxSpeedRange} value={currentSpeedRange} onChange={e => changeSpeed(e.target.value)} />\n          </div>\n          <br />\n          <br />\n        </div>\n        <div id=\"sidebar-group-2\">\n          <div>\n            Generation: {game ? game.generation : 0}\n          </div>\n          <br />\n          <div>\n            <input type=\"button\" onClick={advanceOneGeneration} disabled={isRunning} value=\"Advance 1 Generation\" />\n          </div>\n          <br />\n          <div>\n            <input type=\"button\" onClick={() => goToGeneration(game.generation - 10) } value=\"Rewind 10 Generations\" />\n          </div>\n          <div>\n            <input type=\"button\" onClick={() => goToGeneration(game.generation - 100) } value=\"Rewind 100 Generations\" />\n          </div>\n          <div>\n            <input type=\"button\" onClick={() => goToGeneration(0) } value=\"Reset to Generation 0\" />\n          </div>\n          <br />\n          <br />\n        </div>\n      </div>\n      <div id=\"board-container\">\n        <Board boardRef={boardRef} board={game ? game.board : []} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// i got this from https://stackoverflow.com/questions/43817118/how-to-get-the-width-of-a-react-element.\r\nimport { useState, useEffect } from 'react';\r\n\r\nexport const useRefSize = elementRef => {\r\n    const [dimensions, setDimensions] = useState({ width: 0, height: 0 });\r\n  \r\n    useEffect(() => {\r\n        const getDimensions = () => ({\r\n            width: elementRef.current.offsetWidth,\r\n            height: elementRef.current.offsetHeight\r\n        });\r\n\r\n        const handleResize = () => {\r\n            setDimensions(getDimensions());\r\n        }\r\n\r\n        if (elementRef.current) {\r\n            setDimensions(getDimensions());\r\n        }\r\n\r\n        window.addEventListener(\"resize\", handleResize);\r\n\r\n        return () => {\r\n            window.removeEventListener(\"resize\", handleResize);\r\n        }\r\n    }, [elementRef]);\r\n  \r\n    return dimensions;\r\n};\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/patternData.bf904ba6.txt\";"],"sourceRoot":""}